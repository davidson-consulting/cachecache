#pragma once

#include <cstdint>
#include <string>
#include <iostream>

namespace kv_store::common {

    class Value {
    private:

        // The data of the value
        uint8_t * _data;

        // The size of the value
        uint32_t _length;

    public:

        /**
         * Allocate a new value
         * @params:
         *   - len: the number of bytes of the allocation
         */
        Value (uint32_t len);

        /*!
         * ====================================================================================================
         * ====================================================================================================
         * ====================================          GETTERS          =====================================
         * ====================================================================================================
         * ====================================================================================================
         */

        /**
         * @returns: the pointer to the data of the value
         * @warning: nullptr if value.len () == 0
         */
        const uint8_t * data () const;

        /**
         * @returns: the pointer to the data of the value
         * @warning: nullptr if value.len () == 0
         */
        uint8_t * data ();

        /**
         * @returns: the pointer to the data of the value
         * @warning: nullptr if value.len () == 0
         */
        template <typename T>
        T* data () {
            return reinterpret_cast<T*> (this-> _data);
        }
        
        /**
         * @returns: the number of bytes in the value
         */
        uint32_t len () const;

        /*!
         * ====================================================================================================
         * ====================================================================================================
         * ===================================          DISPOSING          ====================================
         * ====================================================================================================
         * ====================================================================================================
         */

        /**
         * Free the content of the value
         */
        ~Value ();

        /*!
         * ====================================================================================================
         * ====================================================================================================
         * ======================================          MISC          ======================================
         * ====================================================================================================
         * ====================================================================================================
         */

        friend std::ostream & operator<< (std::ostream & s, const Value & v);

    };


}
