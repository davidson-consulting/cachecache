#!/usr/bin/env python3

import os

VJouleConfig = """
[sensor]
freq = 1
log-lvl = "info"
log-path = "/etc/vjoule/service.log" # file where logs are written, empty for stdout
core = "dumper"
perf-counters = ["LLC_MISSES", "PERF_COUNT_SW_CPU_CLOCK"]
output-dir = "/etc/vjoule/results"

# delete cgroup result directories when the cgroup no longer exists
delete-res = true

# if true mount the result directory in tmpfs (less i/o generated by vjoule)
mount-tmpfs = true

# Compute the division between cgroups based on perf counter from all machine
#                                   or based on the sum of the perf counters of the watched cgroups
perf-division-base = "machine" # "sum"
perf-division-cpu-type = "time" # "instrs", "cycles"

[cpu]
name = "rapl"

[ram]
name = "rapl"

[gpu:0]
name = "rapl"
"""

VJouleCgroups = """
vjoule.slice/*
system.slice/docker-*
SocialNetworkAKKA/*
"""

vjoule_release_addr = "https://github.com/davidson-consulting/vjoule/releases/download/v1.2.0/vjoule-tools_1.2.0.deb"

class VJouleServiceDeployer :

    def __init__ (self, outputDir, nodes, client) :
        self.outputDir = outputDir
        self.client = client
        self.nodes = nodes

    def start (self):
        config = VJouleConfig
        with open ("/tmp/vjoule_config.toml", 'w') as fp:
            fp.write (config)

        config = VJouleCgroups
        with open ("/tmp/vjoule_cgroups", 'w') as fp:
            fp.write (config)

        self.client.uploadFiles (self.nodes, ["/tmp/vjoule_config.toml"], "/tmp/vjoule_config_rem.toml")
        self.client.uploadFiles (self.nodes, ["/tmp/vjoule_cgroups"], "/tmp/vjoule_cgroups_rem")
        self.client.uploadFiles (self.nodes, ["../libs/vjoule.deb"], "vjoule.deb")

        self.client.launchAndWaitCmd (self.nodes, "sudo dpkg -i vjoule.deb ; rm vjoule.deb ; cp /tmp/vjoule_config_rem.toml /etc/vjoule/config.toml ; cp /tmp/vjoule_cgroups_rem /etc/vjoule/cgroups")
        self.client.launchAndWaitCmd (self.nodes, "sudo systemctl start vjoule_service.service")

    def kill (self) :
        for n in self.nodes :
            print (n, self.nodes)
            path = self.outputDir + "/" + str (n.address)
            if (not (os.path.exists (path) and os.path.isdir (path))):
                os.makedirs (path)

            self.client.downloadFiles ([n], ["/etc/vjoule/results/cgroups.csv"], path)
            self.client.downloadFiles ([n], ["/etc/vjoule/results/energy.csv"], path)

        self.client.launchAndWaitCmd (self.nodes, "sudo systemctl stop vjoule_service.service")
