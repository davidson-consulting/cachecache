#pragma once

#include <cstdint>
#include <string>
#include <iostream>

namespace kv_store::common {

    class Key {
    private:

        // The data of the key
        uint8_t * _data;

        // The size of the key
        uint32_t _length;

    public:

        /**
         * Create an empty key
         */
        Key ();

        /**
         * Create a key with preallocated segment of memory
         */
        Key (uint32_t len);

        /*!
         * ====================================================================================================
         * ====================================================================================================
         * ====================================          SETTERS          =====================================
         * ====================================================================================================
         * ====================================================================================================
         */

        /**
         * Set the content of the key
         */
        void set (const std::string & content);

        /*!
         * ====================================================================================================
         * ====================================================================================================
         * ====================================          GETTERS          =====================================
         * ====================================================================================================
         * ====================================================================================================
         */

        /**
         * @returns: the hash of the key
         */
        uint64_t hash () const;

        /**
         * @returns: the pointer to the data of the key
         * @warning: nullptr if key.len () == 0
         */
        const uint8_t * data () const;

        /**
         * @returns: the pointer to the data of the key
         * @warning: nullptr if key.len () == 0
         */
        uint8_t * data () ;

        /**
         * @returns: the number of bytes in the key
         */
        uint32_t len () const;

        /*!
         * ====================================================================================================
         * ====================================================================================================
         * ===================================          DISPOSING          ====================================
         * ====================================================================================================
         * ====================================================================================================
         */

        /**
         * Free the content of the key
         */
        ~Key ();

        /*!
         * ====================================================================================================
         * ====================================================================================================
         * ======================================          MISC          ======================================
         * ====================================================================================================
         * ====================================================================================================
         */

        friend std::ostream & operator<< (std::ostream & s, const Key & k);


    };


}
